#List of possible modules: hosts, become, tasks, apt, yum, package, service, get_url, docker_container, copy, template, file, command, shell, wait_for, user, group, cron
#List of possible states: present, absent, started, stopped, enabled, disabled
- name: Provision Web Servers
  hosts: webservers
  become: yes
  tasks:
    - name: Install pip3
      apt:
        name: python3-pip
        state: present
        update_cache: yes

    - name: Ensure Python 3 is installed
      package:
        name: python3
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose #standard directory for software that is manually installed
        mode: '0755' #file's permissions, 0755 owner full group read and execute, others read and execute

    - name: Ensure Docker is enabled and started
      service:
        name: docker
        state: started
        enabled: true  # Start on boot

    - name: Add current user to docker group (no sudo needed)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Install Git
      apt:
        name: git
        state: present
        update_cache: yes

    #Optional: Use if pulling your repo during provisioning
    - name: Clone GitHub repo
      git:
        repo: https://github.com/esantanamat/devops.git
        dest: /usr/local/devops
        clone: yes
        update: yes

    - name: Clean up unrelated directories (optional cleanup)
      file:
        path: "/usr/local/devops/1-Build-Docker-File"
        state: absent

    - name: Remove existing Flask container
      docker_container:
        name: flask_app
        state: absent
        force_kill: true

    - name: Run Flask container
      docker_container:
        name: flask_app
        image: esantanamat/flask-app:latest
        state: started
        restart_policy: always #restarts container if it stops or crashes(for production)
        env_file: /home/ubuntu/3-Multi-Container-Application/app/.env
        published_ports:
          - "5000:5000"

    - name: Run PostgreSQL container
      docker_container:
        name: postgres_db
        image: postgres:13
        state: started
        restart_policy: always #could be no, on-failure, unless-stopped, always
        env_file: /home/ubuntu/3-Multi-Container-Application/app/.env
        published_ports:
          - "5432:5432"
